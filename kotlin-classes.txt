import kotlin.properties.ReadWriteProperty
import kotlin.reflect.KProperty

fun main() {
    whenCondition()
    nullability()
    
    println()
    
    val smartHome: SmartHome = SmartHome(
        smartTvDevice = SmartTvDevice("Android Tv", "Entertaiment"),
        smartLightDevice = SmartLightDevice("Chrome Light", "Utilities")
    )
    
    smartHome.printSmartTvInfo()
    smartHome.printSmartLightInfo()
}

class RangeRegular(
    initialValue: Int,
    private val minValue: Int,
    private val maxValue: Int
) : ReadWriteProperty<Any?, Int> {
    
    var fieldData = initialValue
    
    override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
        return fieldData
    }
    
    override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int) {
        if(value in minValue..maxValue) {
			fieldData = value
        }
    }
    
}

class SmartHome(
    val smartTvDevice: SmartTvDevice,
    val smartLightDevice: SmartLightDevice,
) {
   
    var deviceTurnOnCount = 0
    	private set
    
    fun turnOnTv() {
        deviceTurnOnCount++
        smartTvDevice.turnOn()
    }
    
    fun turnOffTv() {
        deviceTurnOnCount--
        smartTvDevice.turnOff()
    }
    
    fun increaseTvVolume() {
        smartTvDevice.increaseSpeakerVolume()
    }
    
    fun decreaseTvVolume() {
        smartTvDevice.decreaseVolume()
    }
    
    fun changeTvChannelToNext() {
        smartTvDevice.nextChannel()
    }
    
    fun changeTvChannelToPrevious() {
        smartTvDevice.previousChannel()
    }
    
    fun turnOnLight() {
        deviceTurnOnCount++
        smartLightDevice.turnOn()
    }
    
    fun turnOffLight() {
        deviceTurnOnCount--
        smartLightDevice.turnOff()
    }
    
    fun increaseLightBrightness() {
        smartLightDevice.increaseBrightness()
    }
    
    fun decreaseLightBrightness() {
        smartLightDevice.decreaseBrightness()
    }
    
    fun printSmartTvInfo() {
		smartTvDevice.printDeviceInfo()
    }
    
    fun printSmartLightInfo() {
		smartLightDevice.printDeviceInfo()
    }
    
    fun turnOffAllDevices() {
        deviceTurnOnCount = 0
        turnOffTv()
        turnOffLight()
    }
}

class SmartTvDevice(deviceName: String, deviceCategory: String) : 
	SmartDevice(name = deviceName, category = deviceCategory) {
     
    override val deviceType = "Smart Tv"  
        
    private var speakerVolume by RangeRegular(initialValue = 2, minValue = 0, maxValue = 100)
        
    private var channelNumber by RangeRegular(initialValue = 1, minValue = 0, maxValue = 200)
        
    fun increaseSpeakerVolume() {
        speakerVolume++
        println("Speaker volume increased to $speakerVolume.")
    }
    
    fun decreaseVolume() {
        speakerVolume--
        println("Speaker volume decreased to $speakerVolume.")
    } 
    
    fun nextChannel() {
        channelNumber++
        println("Channel number increased to $channelNumber.")
    }
    
    fun previousChannel() {
        channelNumber--
        println("Channel number decreased to $channelNumber.")
    }
    
    override fun turnOn() {
        super.turnOn()
        println(
            "$name is turned on. Speaker volume is set to $speakerVolume and channel number is " +
                "set to $channelNumber."
        )
    }
    
    override fun turnOff() {
        super.turnOff()
        println("$name turned off")
    }
}
    
class SmartLightDevice(name: String, category: String) : 
	SmartDevice(name = name, category = category) {
    
    override val deviceType = "Smart Light"
        
    private var brightnessLevel by RangeRegular(initialValue = 0, minValue = 0, maxValue = 100)
        
    fun increaseBrightness() {
        brightnessLevel++
        println("Brightness increased to $brightnessLevel.")
    }
    
    fun decreaseBrightness() {
        brightnessLevel--
        println("Brightness decreased to $brightnessLevel.")
    }
    
    override fun turnOn() {
        super.turnOn()
        brightnessLevel = 2
        println("$name turned on. The brightness level is $brightnessLevel.")
    }
    
    override fun turnOff() {
        super.turnOff()
        brightnessLevel = 0
        println("Smart Light turned off")
    }
}

open class SmartDevice(val name: String, val category: String) {
    
    var deviceStatus = "online"
    	protected set(value) {
            field = value
        }
    
    open val deviceType = "unknown"
    
    constructor(name: String, category: String, statusCode: Int) : this(name, category) {
        deviceStatus = when(statusCode) {
            0 -> "offline"
            1 -> "online"
            else -> "unknown"
        }
    }
    
    fun printDeviceInfo() {
		println("Device name: $name, category: $category, type: $deviceType")
    }
    
    open fun turnOn() {
        deviceStatus = "on"
    }
    
    open fun turnOff() {
        deviceStatus = "off"
    }
}